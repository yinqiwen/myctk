// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DATA_TEST_H_
#define FLATBUFFERS_GENERATED_DATA_TEST_H_

#include "flatbuffers/flatbuffers.h"
#include "expr_struct.h"

namespace test {

struct SubData;
struct SubDataBuilder;
struct SubDataT;

struct Data;
struct DataBuilder;
struct DataT;

struct SubDataT : public flatbuffers::NativeTable {
  typedef SubData TableType;
  uint32_t id;
  int32_t iid;
  uint64_t val;
  float score;
  double dscore;
  bool bv;
  int8_t bb;
  uint8_t ubb;
  int16_t sv;
  uint16_t usv;
  std::string name;
  SubDataT()
      : id(0),
        iid(0),
        val(0),
        score(0.0f),
        dscore(0.0),
        bv(false),
        bb(0),
        ubb(0),
        sv(0),
        usv(0) {
  }
};

struct SubData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SubDataT NativeTableType;
  typedef SubDataBuilder Builder;
  static expr_struct::FieldAccessorTable& GetFieldAccessorTable() {
    static expr_struct::FieldAccessorTable accessors;
    return accessors;
  }
  template <typename T>
  static void RegisterFieldAccessor(const std::string& name, expr_struct::FieldAccessor&& accessor){
    expr_struct::FieldAccessorTable& accessors = GetFieldAccessorTable();
    if constexpr (std::is_same<T, bool>::value || 
                  std::is_same<T, int8_t>::value || 
                  std::is_same<T, uint8_t>::value || 
                  std::is_same<T, int16_t>::value || 
                  std::is_same<T, uint16_t>::value || 
                  std::is_same<T, int32_t>::value || 
                  std::is_same<T, uint32_t>::value || 
                  std::is_same<T, int64_t>::value || 
                  std::is_same<T, uint64_t>::value || 
                  std::is_same<T, float>::value || 
                  std::is_same<T, double>::value || 
                  std::is_same<T, const flatbuffers::String *>::value){
     accessors[name] = accessor;
    }else{
       using R = typename std::remove_pointer<T>::type;
       using RR = typename std::remove_const<R>::type;
       RR::InitExpr();
       expr_struct::FieldAccessorTable value = RR::GetFieldAccessorTable();;
       accessors[name] = std::pair<expr_struct::FieldAccessor, expr_struct::FieldAccessorTable>(accessor, value);
    }
  }
  static int GetFieldAccessors(const std::vector<std::string>& names,                         
                                 std::vector<expr_struct::FieldAccessor>& accessors) {                                                                                              
      return expr_struct::GetFieldAccessors<SubData>(names, accessors);                                                                                 
  }
  inline expr_struct::FieldValue GetFieldValue(                                               
        const std::vector<expr_struct::FieldAccessor>& accessors) const {                             
          return expr_struct::GetFieldValue(this,accessors);                                                                         
    }
  static void InitExpr(){
    static bool once = false;
    if(once) return;
    once = true;
    SubData* root = nullptr;
    RegisterFieldAccessor<decltype(root->id())>("id", [](const void* v)-> expr_struct::FieldValue {
      const SubData* obj = (const SubData*)v;
      return obj->id();
    });
    RegisterFieldAccessor<decltype(root->iid())>("iid", [](const void* v)-> expr_struct::FieldValue {
      const SubData* obj = (const SubData*)v;
      return obj->iid();
    });
    RegisterFieldAccessor<decltype(root->val())>("val", [](const void* v)-> expr_struct::FieldValue {
      const SubData* obj = (const SubData*)v;
      return obj->val();
    });
    RegisterFieldAccessor<decltype(root->score())>("score", [](const void* v)-> expr_struct::FieldValue {
      const SubData* obj = (const SubData*)v;
      return obj->score();
    });
    RegisterFieldAccessor<decltype(root->dscore())>("dscore", [](const void* v)-> expr_struct::FieldValue {
      const SubData* obj = (const SubData*)v;
      return obj->dscore();
    });
    RegisterFieldAccessor<decltype(root->bv())>("bv", [](const void* v)-> expr_struct::FieldValue {
      const SubData* obj = (const SubData*)v;
      return obj->bv();
    });
    RegisterFieldAccessor<decltype(root->bb())>("bb", [](const void* v)-> expr_struct::FieldValue {
      const SubData* obj = (const SubData*)v;
      return obj->bb();
    });
    RegisterFieldAccessor<decltype(root->ubb())>("ubb", [](const void* v)-> expr_struct::FieldValue {
      const SubData* obj = (const SubData*)v;
      return obj->ubb();
    });
    RegisterFieldAccessor<decltype(root->sv())>("sv", [](const void* v)-> expr_struct::FieldValue {
      const SubData* obj = (const SubData*)v;
      return obj->sv();
    });
    RegisterFieldAccessor<decltype(root->usv())>("usv", [](const void* v)-> expr_struct::FieldValue {
      const SubData* obj = (const SubData*)v;
      return obj->usv();
    });
    RegisterFieldAccessor<decltype(root->name())>("name", [](const void* v)->expr_struct::FieldValue {
      const SubData* obj = (const SubData*)v;
      const flatbuffers::String* sv = obj->name();
      std::string_view rv(sv->c_str(), sv->size());
      return rv;
    });
   }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_IID = 6,
    VT_VAL = 8,
    VT_SCORE = 10,
    VT_DSCORE = 12,
    VT_BV = 14,
    VT_BB = 16,
    VT_UBB = 18,
    VT_SV = 20,
    VT_USV = 22,
    VT_NAME = 24
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  int32_t iid() const {
    return GetField<int32_t>(VT_IID, 0);
  }
  uint64_t val() const {
    return GetField<uint64_t>(VT_VAL, 0);
  }
  float score() const {
    return GetField<float>(VT_SCORE, 0.0f);
  }
  double dscore() const {
    return GetField<double>(VT_DSCORE, 0.0);
  }
  bool bv() const {
    return GetField<uint8_t>(VT_BV, 0) != 0;
  }
  int8_t bb() const {
    return GetField<int8_t>(VT_BB, 0);
  }
  uint8_t ubb() const {
    return GetField<uint8_t>(VT_UBB, 0);
  }
  int16_t sv() const {
    return GetField<int16_t>(VT_SV, 0);
  }
  uint16_t usv() const {
    return GetField<uint16_t>(VT_USV, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyField<int32_t>(verifier, VT_IID) &&
           VerifyField<uint64_t>(verifier, VT_VAL) &&
           VerifyField<float>(verifier, VT_SCORE) &&
           VerifyField<double>(verifier, VT_DSCORE) &&
           VerifyField<uint8_t>(verifier, VT_BV) &&
           VerifyField<int8_t>(verifier, VT_BB) &&
           VerifyField<uint8_t>(verifier, VT_UBB) &&
           VerifyField<int16_t>(verifier, VT_SV) &&
           VerifyField<uint16_t>(verifier, VT_USV) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
  SubDataT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SubDataT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<SubData> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SubDataT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SubDataBuilder {
  typedef SubData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(SubData::VT_ID, id, 0);
  }
  void add_iid(int32_t iid) {
    fbb_.AddElement<int32_t>(SubData::VT_IID, iid, 0);
  }
  void add_val(uint64_t val) {
    fbb_.AddElement<uint64_t>(SubData::VT_VAL, val, 0);
  }
  void add_score(float score) {
    fbb_.AddElement<float>(SubData::VT_SCORE, score, 0.0f);
  }
  void add_dscore(double dscore) {
    fbb_.AddElement<double>(SubData::VT_DSCORE, dscore, 0.0);
  }
  void add_bv(bool bv) {
    fbb_.AddElement<uint8_t>(SubData::VT_BV, static_cast<uint8_t>(bv), 0);
  }
  void add_bb(int8_t bb) {
    fbb_.AddElement<int8_t>(SubData::VT_BB, bb, 0);
  }
  void add_ubb(uint8_t ubb) {
    fbb_.AddElement<uint8_t>(SubData::VT_UBB, ubb, 0);
  }
  void add_sv(int16_t sv) {
    fbb_.AddElement<int16_t>(SubData::VT_SV, sv, 0);
  }
  void add_usv(uint16_t usv) {
    fbb_.AddElement<uint16_t>(SubData::VT_USV, usv, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(SubData::VT_NAME, name);
  }
  explicit SubDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SubDataBuilder &operator=(const SubDataBuilder &);
  flatbuffers::Offset<SubData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SubData>(end);
    return o;
  }
};

inline flatbuffers::Offset<SubData> CreateSubData(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    int32_t iid = 0,
    uint64_t val = 0,
    float score = 0.0f,
    double dscore = 0.0,
    bool bv = false,
    int8_t bb = 0,
    uint8_t ubb = 0,
    int16_t sv = 0,
    uint16_t usv = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  SubDataBuilder builder_(_fbb);
  builder_.add_dscore(dscore);
  builder_.add_val(val);
  builder_.add_name(name);
  builder_.add_score(score);
  builder_.add_iid(iid);
  builder_.add_id(id);
  builder_.add_usv(usv);
  builder_.add_sv(sv);
  builder_.add_ubb(ubb);
  builder_.add_bb(bb);
  builder_.add_bv(bv);
  return builder_.Finish();
}

inline flatbuffers::Offset<SubData> CreateSubDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    int32_t iid = 0,
    uint64_t val = 0,
    float score = 0.0f,
    double dscore = 0.0,
    bool bv = false,
    int8_t bb = 0,
    uint8_t ubb = 0,
    int16_t sv = 0,
    uint16_t usv = 0,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return test::CreateSubData(
      _fbb,
      id,
      iid,
      val,
      score,
      dscore,
      bv,
      bb,
      ubb,
      sv,
      usv,
      name__);
}

flatbuffers::Offset<SubData> CreateSubData(flatbuffers::FlatBufferBuilder &_fbb, const SubDataT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct DataT : public flatbuffers::NativeTable {
  typedef Data TableType;
  std::string name;
  double score;
  std::unique_ptr<test::SubDataT> unit;
  DataT()
      : score(0.0) {
  }
};

struct Data FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DataT NativeTableType;
  typedef DataBuilder Builder;
  static expr_struct::FieldAccessorTable& GetFieldAccessorTable() {
    static expr_struct::FieldAccessorTable accessors;
    return accessors;
  }
  template <typename T>
  static void RegisterFieldAccessor(const std::string& name, expr_struct::FieldAccessor&& accessor){
    expr_struct::FieldAccessorTable& accessors = GetFieldAccessorTable();
    if constexpr (std::is_same<T, bool>::value || 
                  std::is_same<T, int8_t>::value || 
                  std::is_same<T, uint8_t>::value || 
                  std::is_same<T, int16_t>::value || 
                  std::is_same<T, uint16_t>::value || 
                  std::is_same<T, int32_t>::value || 
                  std::is_same<T, uint32_t>::value || 
                  std::is_same<T, int64_t>::value || 
                  std::is_same<T, uint64_t>::value || 
                  std::is_same<T, float>::value || 
                  std::is_same<T, double>::value || 
                  std::is_same<T, const flatbuffers::String *>::value){
     accessors[name] = accessor;
    }else{
       using R = typename std::remove_pointer<T>::type;
       using RR = typename std::remove_const<R>::type;
       RR::InitExpr();
       expr_struct::FieldAccessorTable value = RR::GetFieldAccessorTable();;
       accessors[name] = std::pair<expr_struct::FieldAccessor, expr_struct::FieldAccessorTable>(accessor, value);
    }
  }
  static int GetFieldAccessors(const std::vector<std::string>& names,                         
                                 std::vector<expr_struct::FieldAccessor>& accessors) {                                                                                              
      return expr_struct::GetFieldAccessors<Data>(names, accessors);                                                                                 
  }
  inline expr_struct::FieldValue GetFieldValue(                                               
        const std::vector<expr_struct::FieldAccessor>& accessors) const {                             
          return expr_struct::GetFieldValue(this,accessors);                                                                         
    }
  static void InitExpr(){
    static bool once = false;
    if(once) return;
    once = true;
    Data* root = nullptr;
    RegisterFieldAccessor<decltype(root->name())>("name", [](const void* v)->expr_struct::FieldValue {
      const Data* obj = (const Data*)v;
      const flatbuffers::String* sv = obj->name();
      std::string_view rv(sv->c_str(), sv->size());
      return rv;
    });
    RegisterFieldAccessor<decltype(root->score())>("score", [](const void* v)-> expr_struct::FieldValue {
      const Data* obj = (const Data*)v;
      return obj->score();
    });
    RegisterFieldAccessor<decltype(root->unit())>("unit", [](const void* v)-> expr_struct::FieldValue {
      const Data* obj = (const Data*)v;
      return obj->unit();
    });
   }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_SCORE = 6,
    VT_UNIT = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  double score() const {
    return GetField<double>(VT_SCORE, 0.0);
  }
  const test::SubData *unit() const {
    return GetPointer<const test::SubData *>(VT_UNIT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<double>(verifier, VT_SCORE) &&
           VerifyOffset(verifier, VT_UNIT) &&
           verifier.VerifyTable(unit()) &&
           verifier.EndTable();
  }
  DataT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(DataT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Data> Pack(flatbuffers::FlatBufferBuilder &_fbb, const DataT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct DataBuilder {
  typedef Data Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Data::VT_NAME, name);
  }
  void add_score(double score) {
    fbb_.AddElement<double>(Data::VT_SCORE, score, 0.0);
  }
  void add_unit(flatbuffers::Offset<test::SubData> unit) {
    fbb_.AddOffset(Data::VT_UNIT, unit);
  }
  explicit DataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DataBuilder &operator=(const DataBuilder &);
  flatbuffers::Offset<Data> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Data>(end);
    return o;
  }
};

inline flatbuffers::Offset<Data> CreateData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    double score = 0.0,
    flatbuffers::Offset<test::SubData> unit = 0) {
  DataBuilder builder_(_fbb);
  builder_.add_score(score);
  builder_.add_unit(unit);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Data> CreateDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    double score = 0.0,
    flatbuffers::Offset<test::SubData> unit = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return test::CreateData(
      _fbb,
      name__,
      score,
      unit);
}

flatbuffers::Offset<Data> CreateData(flatbuffers::FlatBufferBuilder &_fbb, const DataT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline SubDataT *SubData::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<test::SubDataT> _o = std::unique_ptr<test::SubDataT>(new SubDataT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void SubData::UnPackTo(SubDataT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = id(); _o->id = _e; }
  { auto _e = iid(); _o->iid = _e; }
  { auto _e = val(); _o->val = _e; }
  { auto _e = score(); _o->score = _e; }
  { auto _e = dscore(); _o->dscore = _e; }
  { auto _e = bv(); _o->bv = _e; }
  { auto _e = bb(); _o->bb = _e; }
  { auto _e = ubb(); _o->ubb = _e; }
  { auto _e = sv(); _o->sv = _e; }
  { auto _e = usv(); _o->usv = _e; }
  { auto _e = name(); if (_e) _o->name = _e->str(); }
}

inline flatbuffers::Offset<SubData> SubData::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SubDataT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSubData(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<SubData> CreateSubData(flatbuffers::FlatBufferBuilder &_fbb, const SubDataT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const SubDataT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _id = _o->id;
  auto _iid = _o->iid;
  auto _val = _o->val;
  auto _score = _o->score;
  auto _dscore = _o->dscore;
  auto _bv = _o->bv;
  auto _bb = _o->bb;
  auto _ubb = _o->ubb;
  auto _sv = _o->sv;
  auto _usv = _o->usv;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  return test::CreateSubData(
      _fbb,
      _id,
      _iid,
      _val,
      _score,
      _dscore,
      _bv,
      _bb,
      _ubb,
      _sv,
      _usv,
      _name);
}

inline DataT *Data::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<test::DataT> _o = std::unique_ptr<test::DataT>(new DataT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Data::UnPackTo(DataT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = score(); _o->score = _e; }
  { auto _e = unit(); if (_e) _o->unit = std::unique_ptr<test::SubDataT>(_e->UnPack(_resolver)); }
}

inline flatbuffers::Offset<Data> Data::Pack(flatbuffers::FlatBufferBuilder &_fbb, const DataT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateData(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Data> CreateData(flatbuffers::FlatBufferBuilder &_fbb, const DataT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const DataT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _o->name.empty() ? 0 : _fbb.CreateString(_o->name);
  auto _score = _o->score;
  auto _unit = _o->unit ? CreateSubData(_fbb, _o->unit.get(), _rehasher) : 0;
  return test::CreateData(
      _fbb,
      _name,
      _score,
      _unit);
}

inline const test::Data *GetData(const void *buf) {
  return flatbuffers::GetRoot<test::Data>(buf);
}

inline const test::Data *GetSizePrefixedData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<test::Data>(buf);
}

inline bool VerifyDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<test::Data>(nullptr);
}

inline bool VerifySizePrefixedDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<test::Data>(nullptr);
}

inline void FinishDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<test::Data> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<test::Data> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<test::DataT> UnPackData(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<test::DataT>(GetData(buf)->UnPack(res));
}

inline std::unique_ptr<test::DataT> UnPackSizePrefixedData(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<test::DataT>(GetSizePrefixedData(buf)->UnPack(res));
}

}  // namespace test

#endif  // FLATBUFFERS_GENERATED_DATA_TEST_H_
