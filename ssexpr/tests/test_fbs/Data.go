// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package test_fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DataT struct {
	Name string
	Score float64
	Unit *SubDataT
	X uint32
	Y uint32
}

func (t *DataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	unitOffset := t.Unit.Pack(builder)
	DataStart(builder)
	DataAddName(builder, nameOffset)
	DataAddScore(builder, t.Score)
	DataAddUnit(builder, unitOffset)
	DataAddX(builder, t.X)
	DataAddY(builder, t.Y)
	return DataEnd(builder)
}

func (rcv *Data) UnPackTo(t *DataT) {
	t.Name = string(rcv.Name())
	t.Score = rcv.Score()
	t.Unit = rcv.Unit(nil).UnPack()
	t.X = rcv.X()
	t.Y = rcv.Y()
}

func (rcv *Data) UnPack() *DataT {
	if rcv == nil { return nil }
	t := &DataT{}
	rcv.UnPackTo(t)
	return t
}

type Data struct {
	_tab flatbuffers.Table
}

func GetRootAsData(buf []byte, offset flatbuffers.UOffsetT) *Data {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Data{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Data) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Data) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Data) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Data) Score() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Data) MutateScore(n float64) bool {
	return rcv._tab.MutateFloat64Slot(6, n)
}

func (rcv *Data) Unit(obj *SubData) *SubData {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(SubData)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Data) X() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Data) MutateX(n uint32) bool {
	return rcv._tab.MutateUint32Slot(10, n)
}

func (rcv *Data) Y() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Data) MutateY(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func DataStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func DataAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func DataAddScore(builder *flatbuffers.Builder, score float64) {
	builder.PrependFloat64Slot(1, score, 0.0)
}
func DataAddUnit(builder *flatbuffers.Builder, unit flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(unit), 0)
}
func DataAddX(builder *flatbuffers.Builder, x uint32) {
	builder.PrependUint32Slot(3, x, 0)
}
func DataAddY(builder *flatbuffers.Builder, y uint32) {
	builder.PrependUint32Slot(4, y, 0)
}
func DataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
