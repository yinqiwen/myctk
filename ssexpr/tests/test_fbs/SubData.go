// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package test_fbs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SubDataT struct {
	Id uint32
	Iid int32
	Val uint64
	Score float32
	Dscore float64
	Bv bool
	Bb int8
	Ubb byte
	Sv int16
	Usv uint16
	Name string
}

func (t *SubDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := builder.CreateString(t.Name)
	SubDataStart(builder)
	SubDataAddId(builder, t.Id)
	SubDataAddIid(builder, t.Iid)
	SubDataAddVal(builder, t.Val)
	SubDataAddScore(builder, t.Score)
	SubDataAddDscore(builder, t.Dscore)
	SubDataAddBv(builder, t.Bv)
	SubDataAddBb(builder, t.Bb)
	SubDataAddUbb(builder, t.Ubb)
	SubDataAddSv(builder, t.Sv)
	SubDataAddUsv(builder, t.Usv)
	SubDataAddName(builder, nameOffset)
	return SubDataEnd(builder)
}

func (rcv *SubData) UnPackTo(t *SubDataT) {
	t.Id = rcv.Id()
	t.Iid = rcv.Iid()
	t.Val = rcv.Val()
	t.Score = rcv.Score()
	t.Dscore = rcv.Dscore()
	t.Bv = rcv.Bv()
	t.Bb = rcv.Bb()
	t.Ubb = rcv.Ubb()
	t.Sv = rcv.Sv()
	t.Usv = rcv.Usv()
	t.Name = string(rcv.Name())
}

func (rcv *SubData) UnPack() *SubDataT {
	if rcv == nil { return nil }
	t := &SubDataT{}
	rcv.UnPackTo(t)
	return t
}

type SubData struct {
	_tab flatbuffers.Table
}

func GetRootAsSubData(buf []byte, offset flatbuffers.UOffsetT) *SubData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SubData{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *SubData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SubData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SubData) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SubData) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(4, n)
}

func (rcv *SubData) Iid() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SubData) MutateIid(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *SubData) Val() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SubData) MutateVal(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *SubData) Score() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *SubData) MutateScore(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *SubData) Dscore() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *SubData) MutateDscore(n float64) bool {
	return rcv._tab.MutateFloat64Slot(12, n)
}

func (rcv *SubData) Bv() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *SubData) MutateBv(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func (rcv *SubData) Bb() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SubData) MutateBb(n int8) bool {
	return rcv._tab.MutateInt8Slot(16, n)
}

func (rcv *SubData) Ubb() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SubData) MutateUbb(n byte) bool {
	return rcv._tab.MutateByteSlot(18, n)
}

func (rcv *SubData) Sv() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SubData) MutateSv(n int16) bool {
	return rcv._tab.MutateInt16Slot(20, n)
}

func (rcv *SubData) Usv() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SubData) MutateUsv(n uint16) bool {
	return rcv._tab.MutateUint16Slot(22, n)
}

func (rcv *SubData) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func SubDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(11)
}
func SubDataAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(0, id, 0)
}
func SubDataAddIid(builder *flatbuffers.Builder, iid int32) {
	builder.PrependInt32Slot(1, iid, 0)
}
func SubDataAddVal(builder *flatbuffers.Builder, val uint64) {
	builder.PrependUint64Slot(2, val, 0)
}
func SubDataAddScore(builder *flatbuffers.Builder, score float32) {
	builder.PrependFloat32Slot(3, score, 0.0)
}
func SubDataAddDscore(builder *flatbuffers.Builder, dscore float64) {
	builder.PrependFloat64Slot(4, dscore, 0.0)
}
func SubDataAddBv(builder *flatbuffers.Builder, bv bool) {
	builder.PrependBoolSlot(5, bv, false)
}
func SubDataAddBb(builder *flatbuffers.Builder, bb int8) {
	builder.PrependInt8Slot(6, bb, 0)
}
func SubDataAddUbb(builder *flatbuffers.Builder, ubb byte) {
	builder.PrependByteSlot(7, ubb, 0)
}
func SubDataAddSv(builder *flatbuffers.Builder, sv int16) {
	builder.PrependInt16Slot(8, sv, 0)
}
func SubDataAddUsv(builder *flatbuffers.Builder, usv uint16) {
	builder.PrependUint16Slot(9, usv, 0)
}
func SubDataAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(name), 0)
}
func SubDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
